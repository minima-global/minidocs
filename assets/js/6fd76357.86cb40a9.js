"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[9991],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=o.createContext({}),c=function(n){var e=o.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=c(n.components);return o.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?o.createElement(f,a(a({ref:e},u),{},{components:t})):o.createElement(f,a({ref:e},u))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:r,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9745:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],l={sidebar_position:3},s="Pruning",c={unversionedId:"buildonminima/txntutorial/pruning",id:"buildonminima/txntutorial/pruning",title:"Pruning",description:"To ensure all users on the Minima network can run a Complete node, both validating all transactions and helping in the construction of the chain, all users only keep track of coins and tokens that are relevant to them.",source:"@site/docs/buildonminima/txntutorial/pruning.md",sourceDirName:"buildonminima/txntutorial",slug:"/buildonminima/txntutorial/pruning",permalink:"/docs/buildonminima/txntutorial/pruning",editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/txntutorial/pruning.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Start",permalink:"/docs/buildonminima/txntutorial/start"},next:{title:"Basic signed contract",permalink:"/docs/buildonminima/txntutorial/layer1/basiccontract"}},u={},p=[],d={toc:p};function m(n){var e=n.components,t=(0,r.Z)(n,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pruning"},"Pruning"),(0,i.kt)("p",null,"To ensure all users on the Minima network can run a Complete node, both validating all transactions and helping in the construction of the chain, all users only keep track of coins and tokens that are relevant to them. "),(0,i.kt)("p",null,"All the coin data is stored in an MMR database, a type of hash tree, and when a User wishes to spend a coin they add a proof of its existence to the transaction. This means when using multiple User coins in a single transaction each user may not have all the coin data required."),(0,i.kt)("p",null,"To assist in this Minima provides useful functions. ",(0,i.kt)("inlineCode",{parentName:"p"},"coinimport")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"coinexport")," allow a User to share coin proofs with other users ( this does not allow the spending of a coin - just the knowledge of its existence ), and ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens tokenid: action:export")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens tokenid: action:import data:")," allows the sharing of token data."),(0,i.kt)("p",null,"If the coin / token data is recent, in the last 24 hours, then each User will already have all the required data, so this will only apply for older coins."),(0,i.kt)("p",null,"Let's say you have a coin with coinid : ",(0,i.kt)("inlineCode",{parentName:"p"},"0x99ADECBF2579801921017F81F523D396AA2ED125BF8DE7244045F86C7F7B56E0"),"\n(Coin IDs can be found by running ",(0,i.kt)("inlineCode",{parentName:"p"},"coins relevant:true"),")"),(0,i.kt)("p",null,"To export this coin, so another node can import and now know about this coin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"coinexport coinid:0x99ADECBF2579801921017F81F523D396AA2ED125BF8DE7244045F86C7F7B56E0\n")),(0,i.kt)("p",null,"The command ",(0,i.kt)("inlineCode",{parentName:"p"},"response")," is the coin ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," required to be imported by another user."),(0,i.kt)("p",null,"Then the other node can import this proof by using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"coinimport data:0x0000002099ADECBF2579801921017F81F523D396AA2ED125BF8DE7244045F86C7F7B56E000000020E5A95D8CDDA0A66A9EB5180479254B23FFBA427EF20603A83F66F95179D8257D00010A000000010001000100000000010A00000200D30001000000020130000100\n")),(0,i.kt)("p",null,"A similar set of functions can be run to export and then import token details:"),(0,i.kt)("p",null,"To export a token: ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens tokenid: action:export")),(0,i.kt)("p",null,"To import a token: ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens tokenid: action:import data:")))}m.isMDXComponent=!0}}]);