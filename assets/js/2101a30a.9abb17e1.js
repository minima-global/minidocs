"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[5634],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>g});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var r=t.createContext({}),c=function(e){var n=t.useContext(r),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(r.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(a),u=i,g=m["".concat(r,".").concat(u)]||m[u]||d[u]||s;return a?t.createElement(g,l(l({ref:n},p),{},{components:a})):t.createElement(g,l({ref:n},p))}));function g(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=a.length,l=new Array(s);l[0]=u;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<s;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4554:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=a(7462),i=(a(7294),a(3905));const s={sidebar_position:8},l="Background service",o={unversionedId:"buildonminima/dapps/servicejs",id:"buildonminima/dapps/servicejs",title:"Background service",description:"Overview",source:"@site/docs/buildonminima/dapps/servicejs.md",sourceDirName:"buildonminima/dapps",slug:"/buildonminima/dapps/servicejs",permalink:"/docs/buildonminima/dapps/servicejs",draft:!1,editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/dapps/servicejs.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"MiniBrowser",permalink:"/docs/buildonminima/dapps/minibrowser"},next:{title:"Start",permalink:"/docs/buildonminima/dapptutorial/start"}},r={},c=[{value:"Overview",id:"overview",level:2},{value:"Initialisation",id:"initialisation",level:2},{value:"Example",id:"example",level:4},{value:"Loading Scripts",id:"loading-scripts",level:2},{value:"Example",id:"example-1",level:4},{value:"Handling Events",id:"handling-events",level:2},{value:"Available Events",id:"available-events",level:4},{value:"Example",id:"example-2",level:4},{value:"Using the MDS API",id:"using-the-mds-api",level:2},{value:"Command Line Commands",id:"command-line-commands",level:3},{value:"SQL Commands",id:"sql-commands",level:3},{value:"Notifications",id:"notifications",level:3},{value:"File Operations",id:"file-operations",level:3},{value:"Network Operations",id:"network-operations",level:3},{value:"Key-Value Store",id:"key-value-store",level:3},{value:"Communication",id:"communication",level:3},{value:"Utility Functions",id:"utility-functions",level:3},{value:"Form Parameters",id:"form-parameters",level:4},{value:"Hex and Base64 Conversion",id:"hex-and-base64-conversion",level:4},{value:"State Variables",id:"state-variables",level:4},{value:"Synchronous Nature of <code>service.js</code>",id:"synchronous-nature-of-servicejs",level:2},{value:"Asynchronous Functions and Callbacks",id:"asynchronous-functions-and-callbacks",level:3},{value:"Callback Example:",id:"callback-example",level:4},{value:"Why Use Callbacks?",id:"why-use-callbacks",level:4},{value:"Basic Example of service.js",id:"basic-example-of-servicejs",level:2}],p={toc:c},m="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(m,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"background-service"},"Background service"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," is the background service script for MiniDapps running on a Minima node. "),(0,i.kt)("p",null,"It acts as the backend engine that handles various operations and tasks, even when the MiniDapp user interface is closed. The ",(0,i.kt)("inlineCode",{parentName:"p"},"mds.js")," library provides the necessary functions and APIs that service.js uses to interact with Minima."),(0,i.kt)("p",null,"Using service.js and mds.js you can, for example, load other necessary JavaScript files, handle and respond to Minima events from the node and interact with the MiniDapp's SQL database."),(0,i.kt)("h2",{id:"initialisation"},"Initialisation"),(0,i.kt)("p",null,"MDS must be initialized to start receiving Minima events. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.init")," with a callback function to handle incoming messages. Note that service.js runs synchronously."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'MDS.init(function(msg) {\n    // Handle different events\n    if (msg.event === "inited") {\n        MDS.log("MDS has been initialised.");\n    } else if (msg.event === "NEWBALANCE") {\n        MDS.log("New balance: " + JSON.stringify(msg.data));\n    } // Add other event handlers as needed\n});\n')),(0,i.kt)("h2",{id:"loading-scripts"},"Loading Scripts"),(0,i.kt)("p",null,"To load additional JavaScript files within ",(0,i.kt)("inlineCode",{parentName:"p"},"service.js"),", use the ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.load")," function. This ensures that all necessary dependencies are available before executing any operations that depend on them."),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Load required files\nMDS.load('./js/jslib.js');\nMDS.load('./js/sql.js');\n")),(0,i.kt)("h2",{id:"handling-events"},"Handling Events"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," can handle various events triggered by Minima. These include on-chain, Maxima and periodic events."),(0,i.kt)("h4",{id:"available-events"},"Available Events"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"inited"),": MDS has been initialised."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NEWBALANCE"),": The balance of the node has changed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NEWBLOCK"),": A new block has been added to the chain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MINING"),": Mining has started or ended."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MINIMALOG"),": A new log message is available."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MAXIMA"),": A Maxima message has been received."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MDS_TIMER_1HOUR"),": A one-hour timer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MDS_TIMER_10SECONDS"),": A 10-second timer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MDS_SHUTDOWN"),": The MiniDapp system is about to be shut down.")),(0,i.kt)("p",null,"For the full list of events, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/buildonminima/dapps/events"},"Events")," page."),(0,i.kt)("h4",{id:"example-2"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'MDS.init(function(msg) {\n    switch (msg.event) {\n        case "inited":\n            MDS.log("MDS has been initialised.");\n            break;\n        case "NEWBALANCE":\n            MDS.log("New balance: " + JSON.stringify(msg.data));\n            break;\n        case "NEWBLOCK":\n            MDS.log("New block: " + JSON.stringify(msg.data));\n            break;\n        case "MINING":\n            MDS.log("Mining status: " + JSON.stringify(msg.data));\n            break;\n        case "MINIMALOG":\n            MDS.log("Log message: " + JSON.stringify(msg.data));\n            break;\n        case "MAXIMA":\n            MDS.log("Maxima message: " + JSON.stringify(msg.data));\n            break;\n        case "MDS_TIMER_1HOUR":\n            MDS.log("One-hour timer event.");\n            break;\n        case "MDS_TIMER_10SECONDS":\n            MDS.log("10-second timer event.");\n            break;\n        case "MDS_SHUTDOWN":\n            MDS.log("System shutdown message received.");\n            break;\n    }\n});\n')),(0,i.kt)("h2",{id:"using-the-mds-api"},"Using the MDS API"),(0,i.kt)("h3",{id:"command-line-commands"},"Command Line Commands"),(0,i.kt)("p",null,"Run Minima commands using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.cmd"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'MDS.cmd("status", function(response) {\n    MDS.log("Minima status: " + JSON.stringify(response));\n});\n')),(0,i.kt)("h3",{id:"sql-commands"},"SQL Commands"),(0,i.kt)("p",null,"Run SQL commands on the MiniDAPP's SQL Database using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.sql"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'MDS.sql("SELECT * FROM mytable", function(response) {\n    MDS.log("SQL response: " + JSON.stringify(response));\n});\n')),(0,i.kt)("h3",{id:"notifications"},"Notifications"),(0,i.kt)("p",null,"Send notifications to the user with ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.notify")," and cancel them with ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.notifycancel"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'MDS.notify("This is a notification message.");\nMDS.notifycancel();\n')),(0,i.kt)("h3",{id:"file-operations"},"File Operations"),(0,i.kt)("p",null,"Perform file operations like saving, loading, and deleting files using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.file"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Save text to a file\nMDS.file.save("example.txt", "Hello, Minima!", function(response) {\n    MDS.log("File save response: " + JSON.stringify(response));\n});\n\n// Load text from a file\nMDS.file.load("example.txt", function(response) {\n    MDS.log("File load response: " + JSON.stringify(response));\n});\n\n// Delete a file\nMDS.file.delete("example.txt", function(response) {\n    MDS.log("File delete response: " + JSON.stringify(response));\n});\n')),(0,i.kt)("h3",{id:"network-operations"},"Network Operations"),(0,i.kt)("p",null,"Make HTTP GET and POST requests using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.net"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Make a GET request\nMDS.net.GET("https://api.example.com/data", function(response) {\n    MDS.log("GET response: " + JSON.stringify(response));\n});\n\n// Make a POST request\nMDS.net.POST("https://api.example.com/data", "key=value", function(response) {\n    MDS.log("POST response: " + JSON.stringify(response));\n});\n')),(0,i.kt)("h3",{id:"key-value-store"},"Key-Value Store"),(0,i.kt)("p",null,"Store and retrieve key-value pairs using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.keypair"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Set a key-value pair\nMDS.keypair.set("mykey", "myvalue", function(response) {\n    MDS.log("Key set response: " + JSON.stringify(response));\n});\n\n// Get a value by key\nMDS.keypair.get("mykey", function(response) {\n    MDS.log("Key get response: " + JSON.stringify(response));\n});\n')),(0,i.kt)("h3",{id:"communication"},"Communication"),(0,i.kt)("p",null,"Send messages to other MiniDAPPs or the same service using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.comms"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Broadcast a message to all MiniDAPPs\nMDS.comms.broadcast("This is a broadcast message.", function(response) {\n    MDS.log("Broadcast response: " + JSON.stringify(response));\n});\n\n// Send a private message to the same MiniDAPP\nMDS.comms.solo("This is a private message.", function(response) {\n    MDS.log("Solo message response: " + JSON.stringify(response));\n});\n')),(0,i.kt)("h3",{id:"utility-functions"},"Utility Functions"),(0,i.kt)("h4",{id:"form-parameters"},"Form Parameters"),(0,i.kt)("p",null,"Retrieve GET parameters from the URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const uid = MDS.form.getParams("uid");\nMDS.log("UID: " + uid);\n')),(0,i.kt)("h4",{id:"hex-and-base64-conversion"},"Hex and Base64 Conversion"),(0,i.kt)("p",null,"Convert between hex and base64 encoding."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const base64 = MDS.util.hexToBase64("48656c6c6f");\nMDS.log("Base64: " + base64);\n\nconst hex = MDS.util.base64ToHex("SGVsbG8=");\nMDS.log("Hex: " + hex);\n')),(0,i.kt)("h4",{id:"state-variables"},"State Variables"),(0,i.kt)("p",null,"Retrieve a state variable given the coin and port."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const stateData = MDS.util.getStateVariable(coin, port);\nMDS.log("State data: " + stateData);\n')),(0,i.kt)("h2",{id:"synchronous-nature-of-servicejs"},"Synchronous Nature of ",(0,i.kt)("inlineCode",{parentName:"h2"},"service.js")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," is synchronous, meaning that tasks and functions in ",(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," are executed one after the other, in sequence. Each task must complete before the next one begins. "),(0,i.kt)("p",null,"However, some tasks will take time to complete, like fetching data from a server, reading a file, or performing complex calculations. If ",(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," had to wait for each of these tasks to finish before moving on to the next one, it could slow down significantly."),(0,i.kt)("h3",{id:"asynchronous-functions-and-callbacks"},"Asynchronous Functions and Callbacks"),(0,i.kt)("p",null,"To handle tasks that take time without blocking the rest of the code, you can use asynchronous functions. These functions allow ",(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," to start a task and then move on to other tasks while waiting for the first one to complete. When the task finishes, a callback function is used to handle the result."),(0,i.kt)("p",null,"A callback is a function that you pass into another function as an argument, which is then executed when the task completes. This way, ",(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," can continue running other code while waiting for long-running tasks to finish."),(0,i.kt)("h4",{id:"callback-example"},"Callback Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Example of synchronous code (blocking)\nMDS.sql("SELECT * FROM mytable", function(response) {\n    MDS.log("SQL response: " + JSON.stringify(response));\n    MDS.notify("Data fetched");\n});\nMDS.log("This log appears after the SQL command completes."); // This will run after the SQL command completes\n\n// Example of asynchronous code (non-blocking)\nMDS.file.load("example.txt", function(response) {\n    MDS.log("File load response: " + JSON.stringify(response));\n    // This callback runs when the file load is complete\n});\nMDS.log("This log appears immediately, not waiting for the file load."); // This runs immediately\n')),(0,i.kt)("h4",{id:"why-use-callbacks"},"Why Use Callbacks?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Efficiency"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"service.js")," can handle multiple tasks simultaneously, improving performance."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Responsiveness"),": The application remains responsive, especially when dealing with tasks that take time, like network requests or file operations."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Scalability"),": Easier to manage complex workflows without blocking other tasks.")),(0,i.kt)("h2",{id:"basic-example-of-servicejs"},"Basic Example of service.js"),(0,i.kt)("p",null,"Below is a basic example of a ",(0,i.kt)("inlineCode",{parentName:"p"},"service.js")," file that performs various operations and logs events using ",(0,i.kt)("inlineCode",{parentName:"p"},"MDS.log"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Load required scripts\nMDS.load(\'dapplib.js\');\n\n// Are we logging data\nvar logs = false;\n\n// Main message handler\nMDS.init(function(msg) {\n    if (msg.event == "inited") {\n        // initialise the database\n        createDB(function(msg) {\n            MDS.log("SQL DB inited");\n        });\n\n        // Get Maxima user details\n        MDS.cmd("maxima", function(msg) {\n            var publicKey = msg.response.publickey;\n            var username = msg.response.name;\n            MDS.log("Maxima user details: " + publicKey + " - " + username);\n        });\n    }\n\n    if (msg.event == "MDS_TIMER_1HOUR") {\n        // Perform hourly tasks\n        performHourlyTasks();\n    }\n\n    if (msg.event == "MAXIMA") {\n        // Handle Maxima messages\n        handleMaximaMessage(msg.data);\n    }\n});\n\nfunction createDB(callback) {\n    MDS.sql("CREATE TABLE IF NOT EXISTS \'tablename\' (id bigint auto_increment, block varchar(256) NOT NULL, hash varchar(256) NOT NULL, timestamp TIMESTAMP NOT NULL)", function(response) {\n        callback(response);\n    });\n}\n\nfunction performHourlyTasks() {\n    MDS.log("Performing hourly tasks...");\n    // Add hourly tasks logic here\n}\n\nfunction handleMaximaMessage(data) {\n    MDS.log("Handling Maxima message: " + JSON.stringify(data));\n    // Add Maxima message handling logic here\n}\n')))}d.isMDXComponent=!0}}]);