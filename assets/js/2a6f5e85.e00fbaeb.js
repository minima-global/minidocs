"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[542],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,b=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return t?a.createElement(b,o(o({ref:n},p),{},{components:t})):a.createElement(b,o({ref:n},p))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:5},o="Events",s={unversionedId:"buildonminima/dapps/events",id:"buildonminima/dapps/events",title:"Events",description:"Minima Events can be listened for, so that users can be notified when specific on-chain events occur.",source:"@site/docs/buildonminima/dapps/events.md",sourceDirName:"buildonminima/dapps",slug:"/buildonminima/dapps/events",permalink:"/docs/buildonminima/dapps/events",draft:!1,editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/dapps/events.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"mds.js library",permalink:"/docs/buildonminima/dapps/mdsjs"},next:{title:"MiniBrowser",permalink:"/docs/buildonminima/dapps/minibrowser"}},l={},c=[],p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"events"},"Events"),(0,i.kt)("p",null,"Minima Events can be listened for, so that users can be notified when specific on-chain events occur."),(0,i.kt)("p",null,"The following events exist:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"inited"),": MDS has been initialised."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NEWBALANCE"),": The balance of the node has changed. "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NEWBLOCK"),": The chain tip has changed (i.e. a new block has been added to the chain). JSON data returned: The TxPoW object of the last block is returned as a JSON Object."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MINING"),": Mining has started or ended.\nJSON data returned: The TxPoW Object, true (if started)/false (if ended)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MINIMALOG"),": A new log message is available"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MAXIMA")," : A Maxima message has been received."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MDS_TIMER_1HOUR")," : A one hour timer."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MDS_TIMER_10SECONDS")," : A 10 second timer."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MDS_SHUTDOWN")," : A message which is sent when the MiniDapp system is about to be shutdown. Shuts down 2 seconds after the message is posted."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'MDS.init(function(msg) {\n    console.log(msg);\n    // inited means Minima API is ready to be used\n    switch(msg.event) {\n      case "inited":\n        // do Minima dependent initializations\n        break;\n      case "NEWBLOCK":\n        // new block message event\n        console.log(msg);\n        // new block message data\n        console.log(msg.data);\n        break;\n      case "MINING":\n        // mining message event\n        console.log(msg);\n        // mining message data\n        console.log(msg.data);\n        break;\n      case "NEWBALANCE":\n        // new balance message event\n        console.log(msg);\n        // there is no data for a new balance event, but you can\n        // call MDS.cmd(\'balance\') to retrieve the balance changes\n        MDS.cmd(\'balance\', function (msg) {\n          console.log(msg.response);\n        });\n    }\n});\n')))}m.isMDXComponent=!0}}]);