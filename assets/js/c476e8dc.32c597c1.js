"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[7123],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:e},p),{},{components:n})):r.createElement(h,i({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1874:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:12},s="MAST Contracts",c={unversionedId:"buildonminima/txntutorial/layer1/mastcontract",id:"buildonminima/txntutorial/layer1/mastcontract",title:"MAST Contracts",description:"MAST stands for Merkelized Abstract Syntax Tree. It is a technique that not only allows for very large scripts to be used, it also greatly increases privacy.",source:"@site/docs/buildonminima/txntutorial/layer1/mastcontract.md",sourceDirName:"buildonminima/txntutorial/layer1",slug:"/buildonminima/txntutorial/layer1/mastcontract",permalink:"/docs/buildonminima/txntutorial/layer1/mastcontract",editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/txntutorial/layer1/mastcontract.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"MultiSig MultiCoin",permalink:"/docs/buildonminima/txntutorial/layer1/multisigmulticoin"},next:{title:"The Vault",permalink:"/docs/buildonminima/txntutorial/layer1/thevault"}},p={},u=[],d={toc:u};function m(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mast-contracts"},"MAST Contracts"),(0,o.kt)("p",null,"MAST stands for ",(0,o.kt)("strong",{parentName:"p"},"M"),"erkelized ",(0,o.kt)("strong",{parentName:"p"},"A"),"bstract ",(0,o.kt)("strong",{parentName:"p"},"S"),"yntax ",(0,o.kt)("strong",{parentName:"p"},"T"),"ree. It is a technique that not only allows for very large scripts to be used, it also greatly increases privacy. "),(0,o.kt)("p",null,"Instead of providing the entire script - you can MAST sections of it and only present the information required for the path of execution. "),(0,o.kt)("p",null,"It involves making hash trees of values, providing the root of the tree, the leaf node and accompanying proof. The proof grows as log(n) for n - standard binary hash tree."),(0,o.kt)("p",null,"In other words.. You have this script :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"IF SIGNEDBY(0xFF) THEN\n//RUN SOME CODE - CODEBLOCK 1\nELSEIF @BLOCK GT 100 THEN\n//RUN SOME OTHER CODE - CODEBLOCK 2\nENDIF\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"codeblock1")," is run then you never need to know what was in ",(0,o.kt)("inlineCode",{parentName:"p"},"codeblock2"),". That code is never executed. These blocks of code could be large, very large. This way you reduce the amount of data needed to be sent with the transaction, decreasing size and increasing privacy. The code could be MegaBytes in size.. all that matters is that the path of execution through the code is below the Minima KISSVM limit. ",(0,o.kt)("strong",{parentName:"p"},"Currently this is set to 512 operations.")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Since a MAST block is a hash tree of different values.. The leaf nodes of the tree are the allowed values.. so you can have ",(0,o.kt)("em",{parentName:"p"},"millions")," of possible script blocks, all accessed via a different merkle proof to root. "))),(0,o.kt)("p",null,"Say you wanted to have a 1 of 10,000 multisig. You could not add 10,000 public keys to a script - as it would make the transaction too large to send over the network. But - each leaf node could be a different ",(0,o.kt)("inlineCode",{parentName:"p"},"SIGNEDBY")," code block, and you would present that code with the correct proof to be allowed to spend that coin. "),(0,o.kt)("p",null,"Or.. perhaps you could use this technique to check for valid game states - tic tac toe would require 3",(0,o.kt)("sup",null,"9")," possible final states.. and when you play the game you provide the winning state (a leaf node + proof) which is checked in the script. (More on that later.. )"),(0,o.kt)("p",null,"The way you would package this up is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"IF SIGNEDBY(0xFF) THEN\nMAST 0x72BE56DFD48B785139A72512FEAAC7E339B8F48132E9B9340A248EFC00F4A5DA\nELSEIF @BLOCK GT 100 THEN\nMAST 0xFA1B16685F09FA56581614AC55E731697C46926392129F3A6BF8FA5EE202A251\nENDIF\n")),(0,o.kt)("p",null,"Then you provide the script proof for the particular MAST block. You can have MAST blocks inside other MAST blocks of course.\nLet's now go through a complete example. Let's create a MAST block.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mmrcreate nodes:["RETURN TRUE","RETURN FALSE"]\n')),(0,o.kt)("p",null,"This will create an MMR tree, with 2 leaf nodes. You can check the proofs with the data provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"mmrcreate"),".."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mmrproof data:"RETURN TRUE" proof:0x00000101000000002068073D52B5CE60A854BA2AA42CFB2E27D9FADFC9C4F7EA52FE48E58F604EBEC7 root:0x0E321692DA8996A833F88EC8A73F3AA8A5E949AD12FF48207130C7AE6F9DC115\n')),(0,o.kt)("p",null,"The root value is the value you give MAST. The above returns true.. but you could also use :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mmrproof data:"RETURN FALSE" proof:0x00000101010000002072BE56DFD48B785139A72512FEAAC7E339B8F48132E9B9340A248EFC00F4A5DA root:0x0E321692DA8996A833F88EC8A73F3AA8A5E949AD12FF48207130C7AE6F9DC115\n')),(0,o.kt)("p",null,"This will also return true. What is important to note is that BOTH have the same root. It is the merkle proof that is different for both."),(0,o.kt)("p",null,"So how to check this in a script.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'runscript script:"MAST 0x0E321692DA8996A833F88EC8A73F3AA8A5E949AD12FF48207130C7AE6F9DC115" extrascripts:{"RETURN TRUE":"0x00000101000000002068073D52B5CE60A854BA2AA42CFB2E27D9FADFC9C4F7EA52FE48E58F604EBEC7"}\n')),(0,o.kt)("p",null,"You could create interesting scripts with multiple ways of them being executed.. You can even use these merkelized proofs as state variables and check them yourself in script."),(0,o.kt)("p",null,"In this case.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'runscript script:"LET script=[RETURN TRUE] LET proof=0x00000101000000002068073D52B5CE60A854BA2AA42CFB2E27D9FADFC9C4F7EA52F E48E58F604EBEC7 LET root=0x0E321692DA8996A833F88EC8A73F3AA8A5E949AD12FF48207130C7AE6F9DC115 ASSERT PROOF(script proof root) EXEC script"\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PROOF")," takes the same arguments as ",(0,o.kt)("inlineCode",{parentName:"p"},"mmrproof"),". "),(0,o.kt)("p",null,"You could put those variables as state variables and have a generic contract that can run ANY of the leaf node scripts you create in your tree.. like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'runscript script:"LET script=STATE(0) LET proof=STATE(1) ASSERT PROOF(script proof 0x0E321692DA8996A833F88EC8A73F3AA8A5E949AD12FF48207130C7AE6F9DC115) EXEC script" state:{"0":"[RETURN TRUE]",  "1":"0x00000101000000002068073D52B5CE60A854BA2AA42CFB2E27D9FADFC9C4F7EA52FE48E58F604EBEC7"}\n')),(0,o.kt)("p",null,"You would still want a signature - or put that as a requirement in the leaf node script."),(0,o.kt)("p",null,"When adding extra scripts to a custom txn you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"txnscript"),". Here is an example."),(0,o.kt)("p",null,"First let's calculate the simplest MAST script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'scripts action:clean script:"RETURN TRUE"\n')),(0,o.kt)("p",null,"This will return the clean version.. And the address: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"0x72BE56DFD48B785139A72512FEAAC7E339B8F48132E9B9340A248EFC00F4A5DA\n")),(0,o.kt)("p",null,"Now send funds to it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"send amount:1 address:0x459C3CE5EDDF8E78F901A7289981640A8A3A83E2B95558435BFEBBD674CF8D50\n")),(0,o.kt)("p",null,"Now wait for those to clear. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"coins relevant:true")," to see your coins AND to get the CoinID."),(0,o.kt)("p",null,"Now construct a txn.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"txncreate id:txnmast\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"txninput id:txnmast coinid:0xB2F2E123F6A1E00E956390B3BEDAF48CB475279CD73EC7D4BD2E0D56823A09A3\n")),(0,o.kt)("p",null,"Your coinid will be different.. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"txnoutput id:txnmast address:0xFF amount:1\n")),(0,o.kt)("p",null,"And now we should have a simple txn."),(0,o.kt)("p",null,"Try and post it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"txnpost id:txnmast auto:true\n")),(0,o.kt)("p",null,"We use ",(0,o.kt)("inlineCode",{parentName:"p"},"auto:true")," which is the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"txnbasics"),".\nIt FAILS!.. On the console it will print.."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"'Script FAIL 0 MAST 0x72BE56DFD48B785139A72512FEAAC7E339B8F48132E9B9340A248EFC00F4A5DA'\n")),(0,o.kt)("p",null,"This is because it does not know how to handle the MAST script.. You need to add the scripts that MAST uses. You can clear all the witness data with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"txnclear id:txnmast\n")),(0,o.kt)("p",null,"Now add the details about that script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'txnscript id:txnmast scripts:{"RETURN TRUE":""}\n')),(0,o.kt)("p",null,"The JSON holds the script and the proof. If it is a single script, and not one created with mmrcreate, just leave the proof blank. If it is an mmrcreate script, copy the proof in."),(0,o.kt)("p",null,"Now the transaction knows what that MAST script is.. So try and post it again.."),(0,o.kt)("p",null,"And this time it WORKS!"))}m.isMDXComponent=!0}}]);