"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[542],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(b,o(o({ref:n},p),{},{components:t})):i.createElement(b,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5210:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],s={sidebar_position:5},c="Events",l={unversionedId:"buildonminima/dapps/events",id:"buildonminima/dapps/events",title:"Events",description:"Minima Events can be listened for, so that users can be notified when specific on-chain events occur.",source:"@site/docs/buildonminima/dapps/events.md",sourceDirName:"buildonminima/dapps",slug:"/buildonminima/dapps/events",permalink:"/docs/buildonminima/dapps/events",editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/dapps/events.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"mds.js library",permalink:"/docs/buildonminima/dapps/mdsjs"},next:{title:"MiniBrowser",permalink:"/docs/buildonminima/dapps/minibrowser"}},p={},d=[],u={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"events"},"Events"),(0,a.kt)("p",null,"Minima Events can be listened for, so that users can be notified when specific on-chain events occur."),(0,a.kt)("p",null,"The following events exist:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inited"),": MDS has been initialised."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NEWBALANCE"),": The balance of the node has changed. "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NEWBLOCK"),": The chain tip has changed (i.e. a new block has been added to the chain). JSON data returned: The TxPoW object of the last block is returned as a JSON Object."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MINING"),": Mining has started or ended.\nJSON data returned: The TxPoW Object, true (if started)/false (if ended)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MINIMALOG"),": A new log message is available"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MAXIMA")," : A Maxima message has been received."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MDS_TIMER_1HOUR")," : A one hour timer."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MDS_TIMER_10SECONDS")," : A 10 second timer."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MDS_SHUTDOWN")," : A message which is sent when the MiniDapp system is about to be shutdown. Shuts down 2 seconds after the message is posted."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'MDS.init(function(msg) {\n    console.log(msg);\n    // inited means Minima API is ready to be used\n    switch(msg.event) {\n      case "inited":\n        // do Minima dependent initializations\n        break;\n      case "NEWBLOCK":\n        // new block message event\n        console.log(msg);\n        // new block message data\n        console.log(msg.data);\n        break;\n      case "MINING":\n        // mining message event\n        console.log(msg);\n        // mining message data\n        console.log(msg.data);\n        break;\n      case "NEWBALANCE":\n        // new balance message event\n        console.log(msg);\n        // there is no data for a new balance event, but you can\n        // call MDS.cmd(\'balance\') to retrieve the balance changes\n        MDS.cmd(\'balance\', function (msg) {\n          console.log(msg.response);\n        });\n    }\n});\n')))}m.isMDXComponent=!0}}]);